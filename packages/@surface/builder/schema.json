{
    "$id": "https://github.com/SurfaceJS/surface/blob/master/packages/%40surface/builder/schema.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "analyzer": {
            "properties": {
                "analyzerHost": {
                    "description": "Host that will be used in `server` mode to start HTTP server.",
                    "type": "string"
                },
                "analyzerMode": {
                    "description": "Can be 'server', 'static' or 'disabled'. In 'server' mode analyzer will start HTTP server to show bundle report. In 'static' mode single HTML file with bundle report will be generated. In 'json' mode single JSON file with bundle report will be generated In 'disabled' mode you can use this plugin to just generate Webpack Stats JSON file by setting 'generateStatsFile' to true. Defaults to 'server'.",
                    "enum": [
                        "server",
                        "static",
                        "json",
                        "disabled"
                    ]
                },
                "analyzerPort": {
                    "description": "Port that will be used in `server` mode to start HTTP server.",
                    "oneOf": [
                        {
                            "type": "number"
                        },
                        {
                            "enum": [
                                "auto"
                            ]
                        }
                    ]
                },
                "defaultSizes": {
                    "description": "Module sizes to show in report by default. Should be one of 'stat', 'parsed' or 'gzip'.",
                    "enum": [
                        "parsed",
                        "stat",
                        "gzip"
                    ]
                },
                "excludeAssets": {
                    "description": "Patterns that will be used to match against asset names to exclude them from the report.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "openAnalyzer": {
                    "description": "Automatically open report in default browser.",
                    "type": "boolean"
                },
                "reportFilename": {
                    "description": "Path to bundle report file that will be generated in 'static' mode. Relative to bundles output directory.",
                    "type": "string"
                },
                "reportTitle": {
                    "description": "Content of the HTML title element.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "buildConfiguration": {
            "additionalProperties": false,
            "properties": {
                "cache": {
                    "description": "Cache generated modules and chunks to improve performance for multiple incremental builds.",
                    "oneOf": [
                        {
                            "else": {
                                "$ref": "#/definitions/fileCacheOptions"
                            },
                            "if": {
                                "properties": {
                                    "type": {
                                        "const": "memory"
                                    }
                                }
                            },
                            "properties": {
                                "type": {
                                    "enum": [
                                        "memory",
                                        "filesystem"
                                    ]
                                }
                            },
                            "required": [
                                "type"
                            ],
                            "then": {
                                "$ref": "#/definitions/memoryCacheOptions"
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "optimization": {
                    "$ref": "#/definitions/optimization",
                    "description": ""
                },
                "overrides": {
                    "$ref": "#/definitions/overrides",
                    "description": "Overrides files during compilation."
                },
                "performance": {
                    "$ref": "#/definitions/performance",
                    "description": "Configuration for web performance recommendations."
                },
                "variables": {
                    "description": "Accepts an array with the environment variables that will be used or an object with the variables and their default values.",
                    "oneOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "devServer": {
            "properties": {
                "compress": {
                    "description": "Enable gzip compression for everything served.",
                    "type": "boolean"
                },
                "contentBase": {
                    "description": "Tell the server where to serve content from. This is only necessary if you want to serve static files. devServer.publicPath will be used to determine where the bundles should be served from, and takes precedence.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "type": "number"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "contentBasePublicPath": {
                    "description": "Tell the server at what URL to serve `devServer.contentBase`. If there was a file `assets/manifest.json`, it would be served at `/serve-content-base-at-this-url/manifest.json`.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "host": {
                    "description": "Specify a host to use. By default this is localhost.",
                    "type": "number"
                },
                "hot": {
                    "description": "Enable webpack's Hot Module Replacement feature.",
                    "type": "boolean"
                },
                "hotOnly": {
                    "description": "Enables Hot Module Replacement (see devServer.hot) without page refresh as fallback in case of build failures.",
                    "type": "boolean"
                },
                "index": {
                    "description": "The filename that is considered the index file.",
                    "type": "string"
                },
                "lazy": {
                    "description": "When lazy is enabled, the dev-server will only compile the bundle when it gets requested.",
                    "type": "boolean"
                },
                "liveReload": {
                    "description": "By default, the dev-server will reload/refresh the page when file changes are detected. devServer.hot option must be disabled or devServer.watchContentBase option must be enabled in order for liveReload to take effect. Disable devServer.liveReload by setting it to false.",
                    "type": "boolean"
                },
                "open": {
                    "description": "When open is enabled, the dev server will open the browser.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "openPage": {
                    "description": "Specify a page to navigate to when opening the browser.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ]
                },
                "port": {
                    "description": "Specify a port number to listen for requests on.",
                    "type": "number"
                },
                "public": {
                    "description": "When using inline mode and you're proxying dev-server, the inline client script does not always know where to connect to.  It will try to guess the URL of the server based on window.location, but if that fails you'll need to use this.",
                    "type": "string"
                },
                "publicPath": {
                    "description": "The bundled files will be available in the browser under this path. default is '/'.",
                    "type": "string"
                },
                "quiet": {
                    "description": "With quiet enabled, nothing except the initial startup information will be written to the console.  This also means that errors or warnings from webpack are not visible.",
                    "type": "boolean"
                },
                "useLocalIp": {
                    "description": "This option lets the browser open with your local IP.",
                    "type": "boolean"
                },
                "watchContentBase": {
                    "description": "Tell the server to watch the files served by the devServer.contentBase option. File changes will trigger a full page reload.",
                    "type": "boolean"
                },
                "writeToDisk": {
                    "description": "Tells devServer to write generated assets to the disk.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "entry": {
            "anyOf": [
                {
                    "$ref": "#/definitions/stringOrStringArray"
                },
                {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "type": "object"
                }
            ]
        },
        "eslint": {
            "properties": {
                "configFile": {
                    "description": "The configuration file to use. Notes that paths resolution applied in config file is relative to cwd.",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "Enables ESLint linter.",
                    "type": "boolean"
                },
                "files": {
                    "$ref": "#/definitions/stringOrStringArray",
                    "description": "Specify directories, files, or globs."
                },
                "formatter": {
                    "description": "Formatter used by ESLint.",
                    "enum": [
                        "checkstyle",
                        "codeframe",
                        "compact",
                        "html",
                        "jslint-xml",
                        "json-with-metadata",
                        "json",
                        "junit",
                        "stylish",
                        "table",
                        "tap",
                        "unix",
                        "visualstudio"
                    ]
                }
            }
        },
        "fileCacheOptions": {
            "properties": {
                "cacheDirectory": {
                    "description": "Base directory for the cache (defaults to node_modules/.cache/webpack).",
                    "type": "string"
                },
                "name": {
                    "description": "Name for the cache. Different names will lead to different coexisting caches.",
                    "type": "string"
                },
                "type": {
                    "description": "Filesystem caching.",
                    "enum": [
                        "filesystem"
                    ]
                }
            }
        },
        "includeFiles": {
            "description": "File patterns to copy to output path.",
            "items": {
                "anyOf": [
                    {
                        "type": "string"
                    },
                    {
                        "properties": {
                            "from": {
                                "type": "string"
                            },
                            "to": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "type": "array"
        },
        "index": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "$ref": "#/definitions/indexOptions"
                }
            ]
        },
        "indexOptions": {
            "properties": {
                "cache": {
                    "description": "Emit the file only if it was changed.",
                    "type": "boolean"
                },
                "filename": {
                    "description": "The file to write the HTML to. Supports subdirectories eg: `assets/admin.html` [name] will be replaced by the entry name",
                    "type": "string"
                },
                "minify": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "enum": [
                                "auto"
                            ]
                        }
                    ],
                    "description": "HTML Minification options. Set to `false` to disable minifcation. Set to `'auto'` to enable minifcation only for production mode."
                },
                "publicPath": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "enum": [
                                "auto"
                            ]
                        }
                    ],
                    "description": "By default the public path is set to `auto` - that way the bundler will try to set the publicPath according to the current filename and the project publicPath setting."
                },
                "template": {
                    "description": "Path to the template",
                    "type": "string"
                }
            }
        },
        "logging": {
            "description": "Log level.",
            "enum": [
                "none",
                "verbose",
                "error",
                "warn",
                "info",
                "log"
            ]
        },
        "memoryCacheOptions": {
            "properties": {
                "maxGenerations": {
                    "description": "Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).",
                    "type": "number"
                },
                "type": {
                    "description": "In memory caching.",
                    "enum": [
                        "memory"
                    ]
                }
            }
        },
        "mode": {
            "enum": [
                "development",
                "production"
            ]
        },
        "optimization": {
            "description": "",
            "properties": {
                "chunkIds": {
                    "description": "Define the algorithm to choose chunk ids (named: readable ids for better debugging, deterministic: numeric hash ids for better long term caching, size: numeric ids focused on minimal initial download size, total-size: numeric ids focused on minimal total download size, false: no algorithm used, as custom one can be provided via plugin).",
                    "enum": [
                        false,
                        "natural",
                        "named",
                        "deterministic",
                        "size",
                        "total-size"
                    ]
                },
                "concatenateModules": {
                    "description": "Concatenate modules when possible to generate less modules, more efficient code and enable more optimizations by the minimizer.",
                    "type": "boolean"
                },
                "emitOnErrors": {
                    "description": "Emit assets even when errors occur. Critical errors are emitted into the generated code and will cause errors at runtime.",
                    "type": "boolean"
                },
                "flagIncludedChunks": {
                    "description": "Also flag chunks as loaded which contain a subset of the modules.",
                    "type": "boolean"
                },
                "mangleExports": {
                    "description": "Also flag chunks as loaded which contain a subset of the modules.",
                    "enum": [
                        true,
                        false,
                        "deterministic",
                        "size"
                    ]
                },
                "mergeDuplicateChunks": {
                    "description": "Merge chunks which contain the same modules.",
                    "type": "boolean"
                },
                "minimize": {
                    "description": "Enable minimizing the output. Uses optimization.minimizer.",
                    "type": "boolean"
                },
                "moduleIds": {
                    "description": "Define the algorithm to choose module ids (natural: numeric ids in order of usage, named: readable ids for better debugging, hashed: (deprecated) short hashes as ids for better long term caching, deterministic: numeric hash ids for better long term caching, size: numeric ids focused on minimal initial download size, false: no algorithm used, as custom one can be provided via plugin).",
                    "enum": [
                        false,
                        "natural",
                        "named",
                        "deterministic",
                        "size",
                        "hashed"
                    ]
                },
                "providedExports": {
                    "description": "Figure out which exports are provided by modules to generate more efficient code.",
                    "type": "boolean"
                },
                "usedExports": {
                    "description": "Figure out which exports are used by modules to mangle export names, omit unused exports and generate more efficient code (true: analyse used exports for each runtime, 'global': analyse exports globally for all runtimes combined).",
                    "enum": [
                        true,
                        false,
                        "global"
                    ]
                }
            }
        },
        "overrides": {
            "items": {
                "additionalProperties": false,
                "properties": {
                    "replace": {
                        "type": "string"
                    },
                    "with": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "type": "array"
        },
        "performance": {
            "properties": {
                "hints": {
                    "description": "Sets the format of the hints: warnings, errors or nothing at all.",
                    "enum": [
                        false,
                        "error",
                        "warning"
                    ]
                },
                "maxAssetSize": {
                    "description": "File size limit (in bytes) when exceeded, that webpack will provide performance hints.",
                    "type": "number"
                },
                "maxEntrypointSize": {
                    "description": "Total size of an entry point (in bytes).",
                    "type": "number"
                }
            }
        },
        "preferTs": {
            "anyOf": [
                {
                    "type": "boolean"
                },
                {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            ],
            "description": "Resolve to the ts file when next to the transpiled js file."
        },
        "project": {
            "additionalProperties": false,
            "description": "Project settings.",
            "properties": {
                "analyzer": {
                    "$ref": "#/definitions/analyzer",
                    "description": "Bundler analyzer configuration."
                },
                "context": {
                    "description": "The base directory for resolving the entry option.",
                    "type": "string"
                },
                "dependencies": {
                    "description": "References to other projects to depend on.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "entry": {
                    "$ref": "#/definitions/entry",
                    "description": "Entry points."
                },
                "environments": {
                    "description": "Configurations by mode. Use to override some defaults.",
                    "properties": {
                        "development": {
                            "$ref": "#/definitions/buildConfiguration"
                        },
                        "production": {
                            "$ref": "#/definitions/buildConfiguration"
                        }
                    },
                    "type": "object"
                },
                "eslint": {
                    "$ref": "#/definitions/eslint",
                    "description": "Eslint options."
                },
                "filename": {
                    "description": "The filename of the entry chunk as relative path inside the output path directory.",
                    "type": "string"
                },
                "includeFiles": {
                    "$ref": "#/definitions/includeFiles",
                    "description": "File patterns to copy to output path."
                },
                "index": {
                    "description": "Path to html template file.",
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/mode",
                    "description": "Enable production optimizations or development hints."
                },
                "output": {
                    "description": "The output directory.",
                    "type": "string"
                },
                "preferTs": {
                    "$ref": "#/definitions/preferTs",
                    "description": "Resolve to the ts file when next to the transpiled js file."
                },
                "publicPath": {
                    "description": "The output path from the view of the Javascript / HTML page.",
                    "type": "string"
                },
                "target": {
                    "$ref": "#/definitions/target",
                    "description": "Environment to build for."
                },
                "tsconfig": {
                    "description": "Path to tsconfig file.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "stringOrBoolean": {
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "boolean"
                }
            ]
        },
        "stringOrStringArray": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            ]
        },
        "target": {
            "enum": [
                "pwa",
                "web",
                "webworker"
            ]
        }
    },
    "description": "Surface's builder options.",
    "properties": {
        "$schema": {
            "description": "The schema to verify this document against.",
            "type": "string"
        },
        "clean": {
            "description": "Enables clean builds. Note that clean builds can lead to unexpected results for projects with same output.",
            "type": "boolean"
        },
        "devServer": {
            "$ref": "#/definitions/devServer",
            "description": "Dev Server configuration."
        },
        "logging": {
            "$ref": "#/definitions/logging",
            "description": "Log level."
        },
        "main": {
            "description": "Main project. Used by dev server.",
            "type": "string"
        },
        "projects": {
            "additionalProperties": {
                "$ref": "#/definitions/project"
            },
            "description": "Project map.",
            "type": "object"
        }
    },
    "title": "Surface's builder options"
}