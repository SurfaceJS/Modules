import Messages from "@surface/expression/internal/messages";
import Token    from "@surface/expression/internal/token";

export const validTokens =
[
    { raw: "",                       value: "",                    type: Token.EOF },
    { raw: "x",                      value: "x",                   type: Token.Identifier },
    { raw: "_identifier",            value: "_identifier",         type: Token.Identifier },
    { raw: "identifier",             value: "identifier",          type: Token.Identifier },
    { raw: "\\u0069\\u{65}",         value: "ie",                  type: Token.Identifier },
    { raw: "\\u{65}\\u0069",         value: "ei",                  type: Token.Identifier },
    { raw: "identifier_\\u{FF}",     value: "identifier_ÿ",        type: Token.Identifier },
    { raw: "識別子",                 value: "識別子",               type: Token.Identifier },
    { raw: "foo你",                  value: "foo你",               type: Token.Identifier },
    { raw: "你foo",                  value: "你foo",               type: Token.Identifier },
    { raw: "\"double quotes\"",      value: "double quotes",       type: Token.StringLiteral },
    { raw: "'\\n'",                  value: "\n",                  type: Token.StringLiteral },
    { raw: "'\\r'",                  value: "\r",                  type: Token.StringLiteral },
    { raw: "'\\b'",                  value: "\b",                  type: Token.StringLiteral },
    { raw: "'\\t'",                  value: "\t",                  type: Token.StringLiteral },
    { raw: "'\\f'",                  value: "\f",                  type: Token.StringLiteral },
    { raw: "'\\v'",                  value: "\v",                  type: Token.StringLiteral },
    { raw: "'\\1...'",               value: "...",                type: Token.StringLiteral },
    { raw: "'\\11...'",              value: "	...",              type: Token.StringLiteral },
    { raw: "'\\123...'",             value: "S...",                type: Token.StringLiteral },
    { raw: "'\\u{A9}'",              value: "©",                   type: Token.StringLiteral },
    { raw: "'\\u00A9'",              value: "©",                   type: Token.StringLiteral },
    { raw: "'\\xA9'",                value: "©",                   type: Token.StringLiteral },
    { raw: "'\\z'",                  value: "z",                   type: Token.StringLiteral },
    { raw: "'single quotes'",        value: "single quotes",       type: Token.StringLiteral },
    { raw: "\"quotes '`\"",          value: "quotes '`",           type: Token.StringLiteral },
    { raw: "'quotes \"`'",           value: "quotes \"`",          type: Token.StringLiteral },
    { raw: "`\\n`",                  value: "\n",                  type: Token.Template },
    { raw: "`\\r`",                  value: "\r",                  type: Token.Template },
    { raw: "`\\b`",                  value: "\b",                  type: Token.Template },
    { raw: "`\\t`",                  value: "\t",                  type: Token.Template },
    { raw: "`\\f`",                  value: "\f",                  type: Token.Template },
    { raw: "`\\v`",                  value: "\v",                  type: Token.Template },
    { raw: "`\\u{A9}`",              value: "©",                   type: Token.Template },
    { raw: "`\\u00A9`",              value: "©",                   type: Token.Template },
    { raw: "`\\ujs`",                value: "\\ujs",               type: Token.Template },
    { raw: "`\\xA9`",                value: "©",                   type: Token.Template },
    { raw: "`\\z`",                  value: "z",                   type: Token.Template },
    { raw: "`\\\r`",                 value: "\\\n",                type: Token.Template },
    { raw: "`\\\r\n`",               value: "\\\n",                type: Token.Template },
    { raw: "`\r\n`",                 value: "\n",                  type: Token.Template },
    { raw: "`\\0a`",                 value: "\0a",                 type: Token.Template },
    { raw: "`foo\nbar`",             value: "foo\nbar",            type: Token.Template },
    { raw: "`foo$bar`",              value: "foo$bar",             type: Token.Template },
    { raw: "`\\z`",                  value: "z",                   type: Token.Template },
    { raw: "`string`",               value: "string",              type: Token.Template },
    { raw: "`quotes \"'`",           value: "quotes \"'",          type: Token.Template },
    { raw: "123",                    value: 123,                   type: Token.NumericLiteral },
    { raw: "123.123",                value: 123.123,               type: Token.NumericLiteral },
    { raw: "0.",                     value: 0,                     type: Token.NumericLiteral },
    { raw: ".123",                   value: 0.123,                 type: Token.NumericLiteral },
    { raw: "123_123",                value: 123123,                type: Token.NumericLiteral },
    { raw: "123_123.123",            value: 123123.123,            type: Token.NumericLiteral },
    { raw: ".123_123",               value: 0.123123,              type: Token.NumericLiteral },
    { raw: "123e+1",                 value: 1230,                  type: Token.NumericLiteral },
    { raw: "123e-1",                 value: 12.3,                  type: Token.NumericLiteral },
    { raw: "0x0123456789abcdef",     value: 81985529216486900,     type: Token.NumericLiteral },
    { raw: "0X0123456789abcdef",     value: 81985529216486900,     type: Token.NumericLiteral },
    { raw: "0x0123456789ABCDEF",     value: 81985529216486900,     type: Token.NumericLiteral },
    { raw: "0X0123456789ABCDEF",     value: 81985529216486900,     type: Token.NumericLiteral },
    { raw: "0x0123456789_abcdef",    value: 81985529216486900,     type: Token.NumericLiteral },
    { raw: "0X0123456789_abcdef",    value: 81985529216486900,     type: Token.NumericLiteral },
    { raw: "0x0123456789_ABCDEF",    value: 81985529216486900,     type: Token.NumericLiteral },
    { raw: "0X0123456789_ABCDEF",    value: 81985529216486900,     type: Token.NumericLiteral },
    { raw: "0b0101",                 value: 5,                     type: Token.NumericLiteral },
    { raw: "0B0101",                 value: 5,                     type: Token.NumericLiteral },
    { raw: "0b0101_0101",            value: 85,                    type: Token.NumericLiteral },
    { raw: "0B0101_0101",            value: 85,                    type: Token.NumericLiteral },
    { raw: "018",                    value: 18,                    type: Token.NumericLiteral },
    { raw: "019",                    value: 19,                    type: Token.NumericLiteral },
    { raw: "08",                     value: 8,                     type: Token.NumericLiteral },
    { raw: "01234567",               value: 342391,                type: Token.NumericLiteral },
    { raw: "0_1234567",              value: 342391,                type: Token.NumericLiteral },
    { raw: "0o1234567",              value: 342391,                type: Token.NumericLiteral },
    { raw: "0O1234567",              value: 342391,                type: Token.NumericLiteral },
    { raw: "0o1_234567",             value: 342391,                type: Token.NumericLiteral },
    { raw: "0O1_234567",             value: 342391,                type: Token.NumericLiteral },
    { raw: "true",                   value: true,                  type: Token.BooleanLiteral },
    { raw: "false",                  value: false,                 type: Token.BooleanLiteral },
    { raw: "null",                   value: null,                  type: Token.NullLiteral },
    { raw: "if",                     value: "if",                  type: Token.Keyword },
    { raw: "in",                     value: "in",                  type: Token.Keyword },
    { raw: "do",                     value: "do",                  type: Token.Keyword },
    { raw: "var",                    value: "var",                 type: Token.Keyword },
    { raw: "for",                    value: "for",                 type: Token.Keyword },
    { raw: "new",                    value: "new",                 type: Token.Keyword },
    { raw: "try",                    value: "try",                 type: Token.Keyword },
    { raw: "let",                    value: "let",                 type: Token.Keyword },
    { raw: "this",                   value: "this",                type: Token.Keyword },
    { raw: "else",                   value: "else",                type: Token.Keyword },
    { raw: "case",                   value: "case",                type: Token.Keyword },
    { raw: "void",                   value: "void",                type: Token.Keyword },
    { raw: "with",                   value: "with",                type: Token.Keyword },
    { raw: "enum",                   value: "enum",                type: Token.Keyword },
    { raw: "while",                  value: "while",               type: Token.Keyword },
    { raw: "break",                  value: "break",               type: Token.Keyword },
    { raw: "catch",                  value: "catch",               type: Token.Keyword },
    { raw: "throw",                  value: "throw",               type: Token.Keyword },
    { raw: "const",                  value: "const",               type: Token.Keyword },
    { raw: "yield",                  value: "yield",               type: Token.Keyword },
    { raw: "class",                  value: "class",               type: Token.Keyword },
    { raw: "super",                  value: "super",               type: Token.Keyword },
    { raw: "return",                 value: "return",              type: Token.Keyword },
    { raw: "typeof",                 value: "typeof",              type: Token.Keyword },
    { raw: "delete",                 value: "delete",              type: Token.Keyword },
    { raw: "switch",                 value: "switch",              type: Token.Keyword },
    { raw: "export",                 value: "export",              type: Token.Keyword },
    { raw: "import",                 value: "import",              type: Token.Keyword },
    { raw: "default",                value: "default",             type: Token.Keyword },
    { raw: "finally",                value: "finally",             type: Token.Keyword },
    { raw: "extends",                value: "extends",             type: Token.Keyword },
    { raw: "function",               value: "function",            type: Token.Keyword },
    { raw: "continue",               value: "continue",            type: Token.Keyword },
    { raw: "debugger",               value: "debugger",            type: Token.Keyword },
    { raw: "instanceof",             value: "instanceof",          type: Token.Keyword },
    { raw: "(",                      value: "(",                   type: Token.Punctuator },
    { raw: "{",                      value: "{",                   type: Token.Punctuator },
    { raw: ".",                      value: ".",                   type: Token.Punctuator },
    { raw: "...",                    value: "...",                 type: Token.Punctuator },
    { raw: "}",                      value: "}",                   type: Token.Punctuator },
    { raw: ")",                      value: ")",                   type: Token.Punctuator },
    { raw: ";",                      value: ";",                   type: Token.Punctuator },
    { raw: ",",                      value: ",",                   type: Token.Punctuator },
    { raw: "[",                      value: "[",                   type: Token.Punctuator },
    { raw: "]",                      value: "]",                   type: Token.Punctuator },
    { raw: ":",                      value: ":",                   type: Token.Punctuator },
    { raw: "?",                      value: "?",                   type: Token.Punctuator },
    { raw: "~",                      value: "~",                   type: Token.Punctuator },
    { raw: ">>>=",                   value: ">>>=",                type: Token.Punctuator },
    { raw: "===",                    value: "===",                 type: Token.Punctuator },
    { raw: "!==",                    value: "!==",                 type: Token.Punctuator },
    { raw: ">>>",                    value: ">>>",                 type: Token.Punctuator },
    { raw: "<<=",                    value: "<<=",                 type: Token.Punctuator },
    { raw: ">>=",                    value: ">>=",                 type: Token.Punctuator },
    { raw: "**=",                    value: "**=",                 type: Token.Punctuator },
    { raw: "&&",                     value: "&&",                  type: Token.Punctuator },
    { raw: "||",                     value: "||",                  type: Token.Punctuator },
    { raw: "==",                     value: "==",                  type: Token.Punctuator },
    { raw: "!=",                     value: "!=",                  type: Token.Punctuator },
    { raw: "+=",                     value: "+=",                  type: Token.Punctuator },
    { raw: "-=",                     value: "-=",                  type: Token.Punctuator },
    { raw: "*=",                     value: "*=",                  type: Token.Punctuator },
    { raw: "/=",                     value: "/=",                  type: Token.Punctuator },
    { raw: "++",                     value: "++",                  type: Token.Punctuator },
    { raw: "--",                     value: "--",                  type: Token.Punctuator },
    { raw: "<<",                     value: "<<",                  type: Token.Punctuator },
    { raw: ">>",                     value: ">>",                  type: Token.Punctuator },
    { raw: "&=",                     value: "&=",                  type: Token.Punctuator },
    { raw: "|=",                     value: "|=",                  type: Token.Punctuator },
    { raw: "^=",                     value: "^=",                  type: Token.Punctuator },
    { raw: "%=",                     value: "%=",                  type: Token.Punctuator },
    { raw: "<=",                     value: "<=",                  type: Token.Punctuator },
    { raw: ">=",                     value: ">=",                  type: Token.Punctuator },
    { raw: "=>",                     value: "=>",                  type: Token.Punctuator },
    { raw: "**",                     value: "**",                  type: Token.Punctuator },
    { raw: "<",                      value: "<",                   type: Token.Punctuator },
    { raw: ">",                      value: ">",                   type: Token.Punctuator },
    { raw: "=",                      value: "=",                   type: Token.Punctuator },
    { raw: "!",                      value: "!",                   type: Token.Punctuator },
    { raw: "+",                      value: "+",                   type: Token.Punctuator },
    { raw: "-",                      value: "-",                   type: Token.Punctuator },
    { raw: "*",                      value: "*",                   type: Token.Punctuator },
    { raw: "%",                      value: "%",                   type: Token.Punctuator },
    { raw: "&",                      value: "&",                   type: Token.Punctuator },
    { raw: "|",                      value: "|",                   type: Token.Punctuator },
    { raw: "^",                      value: "^",                   type: Token.Punctuator },
    { raw: "/",                      value: "/",                   type: Token.Punctuator },
];

export const invalidTokens =
[
    { value: "𐏿",                          message: Messages.unexpectedTokenIllegal },
    { value: "\\u{}",                       message: Messages.unexpectedTokenIllegal },
    { value: "0.123e*1",                    message: Messages.unexpectedTokenIllegal },
    { value: "¬",                           message: Messages.unexpectedTokenIllegal },
    { value: "1i",                          message: Messages.unexpectedTokenIllegal },
    { value: "\\xD800",                     message: Messages.unexpectedTokenIllegal },
    { value: "\\uD800",                     message: Messages.unexpectedTokenIllegal },
    { value: "\\u{AH}",                     message: Messages.unexpectedTokenIllegal },
    //{ value: "\\u{123}foo@",                message: Messages.unexpectedTokenIllegal },
    { value: "\\u{123}\\x",                 message: Messages.unexpectedTokenIllegal },
    { value: "\\u{123}\\uD800",             message: Messages.unexpectedTokenIllegal },
    { value: "x\\z",                        message: Messages.unexpectedTokenIllegal },
    { value: "0x",                          message: Messages.unexpectedTokenIllegal },
    { value: "0xFFoo",                      message: Messages.unexpectedTokenIllegal },
    { value: "0xhij",                       message: Messages.unexpectedTokenIllegal },
    { value: "0b23",                        message: Messages.unexpectedTokenIllegal },
    { value: "'\r'",                        message: Messages.unexpectedTokenIllegal },
    { value: "'\\\r'",                      message: Messages.unexpectedTokenIllegal },
    { value: "'\\uA9'",                     message: Messages.unexpectedTokenIllegal },
    { value: "'\\8'",                       message: Messages.unexpectedTokenIllegal },
    { value: "'\\9'",                       message: Messages.unexpectedTokenIllegal },
    { value: "0b",                          message: Messages.unexpectedTokenIllegal },
    { value: "0B",                          message: Messages.unexpectedTokenIllegal },
    { value: "0o8",                         message: Messages.unexpectedTokenIllegal },
    { value: "0O8",                         message: Messages.unexpectedTokenIllegal },
    { value: "0o1a",                        message: Messages.unexpectedTokenIllegal },
    { value: "0O1a",                        message: Messages.unexpectedTokenIllegal },
    { value: "`foo",                        message: Messages.unexpectedTokenIllegal },
    { value: "`\\1`",                       message: Messages.templateOctalLiteral },
    { value: "`\\01`",                      message: Messages.templateOctalLiteral },
    { value: "\\u{006E}\\u{0065}\\u{0077}", message: Messages.invalidEscapedReservedWord },
    { value: "'\\xh'",                      message: Messages.invalidHexEscapeSequence },
    { value: "`\\xh`",                      message: Messages.invalidHexEscapeSequence },
    { value: "1_.123",                      message: Messages.numericSepatorNotAllowed },
    { value: "1._123",                      message: Messages.numericSepatorNotAllowed },
    { value: "1.123_",                      message: Messages.numericSepatorNotAllowed },
    { value: "0x_12",                       message: Messages.numericSepatorNotAllowed },
    { value: "0x12_",                       message: Messages.numericSepatorNotAllowed },
    { value: "0b_10",                       message: Messages.numericSepatorNotAllowed },
    { value: "0b10_",                       message: Messages.numericSepatorNotAllowed },
    { value: "0o_10",                       message: Messages.numericSepatorNotAllowed },
    { value: "0O_10",                       message: Messages.numericSepatorNotAllowed },
    { value: "0o10_",                       message: Messages.numericSepatorNotAllowed },
    { value: "0O10_",                       message: Messages.numericSepatorNotAllowed },
    { value: "010_",                        message: Messages.numericSepatorNotAllowed },
];