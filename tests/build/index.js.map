{"version":3,"sources":["webpack:///webpack/bootstrap 9b6cc8b74b99b94fee59","webpack:///F:/Projects/Surface/workbench/modules/source/@surface/enumerable/index.ts","webpack:///F:/Projects/Surface/workbench/modules/source/@surface/collection/dictionary.ts","webpack:///F:/Projects/Surface/workbench/modules/source/@surface/collection/list.ts","webpack:///./index.ts","webpack:///./collection.ts","webpack:///F:/Projects/Surface/workbench/modules/source/@surface/collection/index.ts","webpack:///F:/Projects/Surface/workbench/modules/source/@surface/enumerable/extensions.ts","webpack:///./router.ts","webpack:///F:/Projects/Surface/workbench/modules/source/@surface/router/index.ts","webpack:///F:/Projects/Surface/workbench/modules/source/@surface/collection/extensions.ts","webpack:///F:/Projects/Surface/workbench/modules/source/@surface/router/route.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9b6cc8b74b99b94fee59","import { Action2, Func1, Func2, Func3, Nullable } from '@surface/types';\r\n\r\nexport abstract class Enumerable<TSource> implements Iterable<TSource>\r\n{\r\n    public abstract [Symbol.iterator]: () => Iterator<TSource>;\r\n\r\n    /** Determines whether a sequence contains any elements. */\r\n    public any(): boolean;\r\n    /**\r\n     * Determines whether any element of a sequence satisfies a condition.\r\n     * @param predicate A function to test each element for a condition.\r\n     */\r\n    public any(predicate: Func1<TSource, boolean>): boolean;\r\n    public any(predicate?: Func1<TSource, boolean>): boolean\r\n    {\r\n        let hasAny = false;\r\n\r\n        let sequence: Enumerable<TSource> = this;\r\n\r\n        if (predicate)\r\n            sequence = sequence.where(predicate);\r\n        \r\n        for (let element of sequence)\r\n        {\r\n            hasAny = element == element;\r\n            break;\r\n        }\r\n\r\n        return hasAny;\r\n    }\r\n\r\n    /** Casts the elements of an IEnumerable to the specified type. Note that no type checking is performed at runtime. */\r\n    public cast<T extends TSource>(): Enumerable<T>\r\n    {\r\n        return (this as Enumerable<TSource>) as Enumerable<T>;\r\n    }\r\n\r\n    /**\r\n     * Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.\r\n     * @param value The value to return if the sequence is empty.\r\n     */\r\n    public defaultIfEmpty(value: TSource): Enumerable<TSource>\r\n    {\r\n        return new DefaultIfEmptyIterator(this, value);\r\n    }\r\n\r\n    /**\r\n     * Returns the element at a specified index in a sequence.\r\n     * @param index The zero-based index of the element to retrieve.\r\n     */\r\n    public elementAt(index: number): TSource\r\n    {\r\n        let element = this.elementAtOrDefault(index);\r\n\r\n        if (!element)\r\n            throw new Error('Index is less than 0 or greater than the number of elements in source.')\r\n\r\n        return element;\r\n    }\r\n\r\n    /**     \r\n     * Returns the element at a specified index in a sequence or or undefined|null value if the index is out of range.\r\n     * @param index The zero-based index of the element to retrieve.\r\n     */\r\n    public elementAtOrDefault(index: number): Nullable<TSource>\r\n    {\r\n        let currentIndex = 0;\r\n        let current: Nullable<TSource> = null;\r\n\r\n        for (const element of this)\r\n        {\r\n            current = element;\r\n            if (currentIndex == index)\r\n                break;\r\n\r\n            index++;\r\n        }\r\n\r\n        return current;\r\n    }\r\n\r\n    /** Returns the first element of a sequence. */\r\n    public first(): TSource;\r\n    /**\r\n     * Returns the first element of the sequence that satisfies a condition.\r\n     * @param predicate A function to test each element for a condition.\r\n     */\r\n    public first(predicate: Func1<TSource, boolean>): TSource;\r\n    public first(predicate?: Func1<TSource, boolean>): TSource\r\n    {\r\n        let element: Nullable<TSource> = null;\r\n\r\n        element = predicate && this.firstOrDefault(predicate) || this.firstOrDefault();\r\n\r\n        if (!element && predicate)\r\n            throw new Error('No element satisfies the condition in predicate.');\r\n        else if (!element)\r\n            throw new Error('The source sequence is empty.');\r\n\r\n        return element;\r\n    }\r\n\r\n    /** Returns the first element of a sequence, or undefined|null if the sequence contains no elements. */\r\n    public firstOrDefault(): Nullable<TSource>;\r\n    /**\r\n     * Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.\r\n     * @param predicate A function to test each element for a condition.\r\n     */\r\n    public firstOrDefault(predicate: Func1<TSource, boolean>): Nullable<TSource>;\r\n    public firstOrDefault(predicate?: Func1<TSource, boolean>): Nullable<TSource>\r\n    {\r\n        if (predicate)\r\n            return this.where(predicate).firstOrDefault();\r\n\r\n        return this[Symbol.iterator]().next().value;\r\n    }\r\n    \r\n    /**\r\n     * Performs the specified action on each element of the sequence by incorporating the element's index.\r\n     * @param action The Action2<TSource, number> delegate to perform on each element of the sequence.\r\n     */\r\n    public forEach(action: Action2<TSource, number>)\r\n    {\r\n        let index = 0;\r\n        for (const element of this)\r\n        {\r\n            action(element, index);\r\n            index++;\r\n        }\r\n    }\r\n\r\n    /** Returns the last element of a sequence. */\r\n    public last(): TSource;\r\n    /**\r\n     * Returns the last element of the sequence that satisfies a condition.\r\n     * @param predicate A function to test each element for a condition.\r\n     */\r\n    public last(predicate: Func1<TSource, boolean>): TSource;\r\n    public last(predicate?: Func1<TSource, boolean>): TSource\r\n    {\r\n        let element: Nullable<TSource> = null;\r\n\r\n        element = predicate && this.lastOrDefault(predicate) || this.lastOrDefault();\r\n\r\n        if (!element && predicate)\r\n            throw new Error('No element satisfies the condition in predicate.');\r\n        else if (!element)\r\n            throw new Error('The source sequence is empty.');\r\n\r\n        return element;\r\n    }\r\n\r\n    /** Returns the last element of a sequence, or undefined|null if the sequence contains no elements. */\r\n    public lastOrDefault(): Nullable<TSource>;\r\n    /**\r\n     * Returns the last element of the sequence that satisfies a condition or a default value if no such element is found.\r\n     * @param predicate A function to test each element for a condition.\r\n     */\r\n    public lastOrDefault(predicate: Func1<TSource, boolean>): Nullable<TSource>;\r\n    public lastOrDefault(predicate?: Func1<TSource, boolean>): Nullable<TSource>\r\n    {\r\n        if (predicate)\r\n            return this.where(predicate).lastOrDefault();\r\n\r\n        let current: Nullable<TSource> = null;\r\n\r\n        for (let element of this)\r\n            current = element;\r\n        \r\n        return current;\r\n    }\r\n\r\n    /**\r\n     * Projects each element of a sequence into a new form by incorporating the element's index.\r\n     * @param selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\r\n     */\r\n    public select<TResult>(selector: Func2<TSource, number, TResult>): Enumerable<TResult>\r\n    {\r\n        return new SelectIterator<TSource, TResult>(this, selector);\r\n    }\r\n\r\n    /**\r\n     * Projects each element of a sequence to an Enumerable<T> and flattens the resulting sequences into one sequence.\r\n     * @param collectionSelector A transform function to apply to each element of the input sequence.\r\n     */\r\n    public selectMany<TResult>(collectionSelector: Func1<TSource, Iterable<TResult>>): Enumerable<TResult>;\r\n    /**\r\n     * \r\n     * @param collectionSelector A transform function to apply to each element of the input sequence.\r\n     * @param selector           A transform function to apply to each element of the intermediate sequence.\r\n     */\r\n    public selectMany<TCollection, TResult>(collectionSelector: Func1<TSource, Iterable<TCollection>>, selector: Func2<TCollection, number, TResult>): Enumerable<TResult>;\r\n    public selectMany<TCollection, TResult>(collectionSelector: Func1<TSource, Iterable<TCollection>>, selector?: Func2<TCollection, number, TResult>): Enumerable<TResult>\r\n    {\r\n        if (!selector)\r\n            selector = x => x as any;\r\n\r\n        return new SelectManyIterator(this, collectionSelector, selector);\r\n    }\r\n\r\n    /**\r\n     * Bypasses a specified number of elements in a sequence and then returns the remaining elements.\r\n     * @param count The number of elements to skip before returning the remaining elements.\r\n     */\r\n    public skip(count: number): Enumerable<TSource>\r\n    {\r\n        return new SkipIterator(this, count);\r\n    }\r\n\r\n    /**\r\n     * Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.\r\n     * The element's index is used in the logic of the predicate function.\r\n     * @param predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.\r\n     */\r\n    public skipWhile(predicate: Func2<TSource, number, boolean>): Enumerable<TSource>\r\n    {\r\n        return new SkipWhileIterator(this, predicate);\r\n    }\r\n\r\n    /**\r\n     * The sequence to return elements from.\r\n     * @param count The number of elements to return.\r\n     */\r\n    public take(count: number): Enumerable<TSource>\r\n    {\r\n        return new TakeIterator(this, count);\r\n    }\r\n\r\n    /**\r\n     * Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.\r\n     * @param predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.\r\n     */\r\n    public takeWhile(predicate: Func2<TSource, number, boolean>): Enumerable<TSource>\r\n    {\r\n        return new TakeWhileIterator(this, predicate);\r\n    }\r\n\r\n    /** Creates an array from a Enumerable<T>. */\r\n    public toArray(): Array<TSource>\r\n    {\r\n        let values: Array<TSource> = [];      \r\n\r\n        for (let element of this)\r\n            values.push(element);\r\n\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * Filters a sequence of values based on a predicate.\r\n     * @param predicate A function to test each element for a condition.\r\n     */\r\n    public where(predicate: Func1<TSource, boolean>): Enumerable<TSource>\r\n    {\r\n        return new WhereIterator(this, predicate);\r\n    }\r\n\r\n    /**\r\n     * Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.\r\n     * @param second   The second sequence to merge.\r\n     * @param selector A function that specifies how to merge the elements from the two sequences.\r\n     */\r\n    public zip<TSecond, TResult>(second: Iterable<TSecond>, selector: Func3<TSource, TSecond, number, TResult>): Enumerable<TResult>\r\n    {\r\n        return new ZipIterator(this, second, selector);\r\n    }\r\n\r\n    /**\r\n     * Create a enumerable object from a iterable source\r\n     * @param source Source used to create the iterable object\r\n     */\r\n    public static from<T>(source: Iterable<T>): Enumerable<T>\r\n    {\r\n        return new EnumerableIterator(source);\r\n    }\r\n}\r\n\r\nclass EnumerableIterator<TSource> extends Enumerable<TSource>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TSource>;\r\n\r\n    public constructor(source: Iterable<TSource>)\r\n    {\r\n        super();\r\n        this[Symbol.iterator] = function*()\r\n        {\r\n            for (const element of source)\r\n            {\r\n                yield element;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass WhereIterator<TSource> extends Enumerable<TSource>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TSource>;\r\n\r\n    public constructor(source: Iterable<TSource>, predicate: Func1<TSource, boolean>)\r\n    {\r\n        super();\r\n        this[Symbol.iterator] = function*()\r\n        {\r\n            for (const element of source)\r\n            {\r\n                if (predicate(element))\r\n                    yield element;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass DefaultIfEmptyIterator<TSource> extends Enumerable<TSource>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TSource>;\r\n\r\n    public constructor(source: Iterable<TSource>, defaultValue: TSource)\r\n    {\r\n        super();\r\n        this[Symbol.iterator] = function*()\r\n        {\r\n            let index = 0;\r\n            for (const element of source)\r\n            {\r\n                index++;\r\n                yield element;\r\n            }\r\n\r\n            if (index == 0)\r\n                yield defaultValue;\r\n        }        \r\n    }\r\n}\r\n\r\nclass SelectIterator<TSource, TResult> extends Enumerable<TResult>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TResult>;\r\n\r\n    public constructor(source: Iterable<TSource>, selector: Func2<TSource, number, TResult>)\r\n    {\r\n        super();\r\n        this[Symbol.iterator] = function* ()\r\n        {\r\n            let index = 0;\r\n            for (const element of source)\r\n                yield selector(element, index++);\r\n        }\r\n    }\r\n}\r\n\r\nclass SelectManyIterator<TSource, TCollection, TResult> extends Enumerable<TResult>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TResult>;\r\n\r\n    public constructor(source: Iterable<TSource>, iterableSelector: Func1<TSource, Iterable<TCollection>>, selector: Func2<TCollection, number, TResult>)\r\n    {\r\n        super();\r\n        this[Symbol.iterator] = function* ()\r\n        {\r\n            let index = 0;\r\n            for (const element of source)\r\n            {\r\n                for (const iteration of iterableSelector(element))\r\n                {\r\n                    yield selector(iteration, index);\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass SkipIterator<TSource> extends Enumerable<TSource>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TSource>;\r\n\r\n    public constructor(source: Iterable<TSource>, count: number)\r\n    {\r\n        super();\r\n\r\n        let index = 1;\r\n\r\n        this[Symbol.iterator] = function* ()\r\n        {\r\n            for (const element of source)\r\n            {\r\n                if (index > count)\r\n                    yield element;\r\n\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass SkipWhileIterator<TSource> extends Enumerable<TSource>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TSource>;\r\n\r\n    public constructor(source: Iterable<TSource>, predicate: Func2<TSource, number, boolean>)\r\n    {\r\n        super();\r\n\r\n        let index = 0;\r\n        let skip  = true;\r\n\r\n        this[Symbol.iterator] = function* ()\r\n        {\r\n            for (const element of source)\r\n            {\r\n                if (skip)\r\n                    skip = predicate(element, index);\r\n                \r\n                if (!skip)\r\n                    yield element;\r\n\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass TakeIterator<TSource> extends Enumerable<TSource>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TSource>;\r\n    \r\n    public constructor(source: Iterable<TSource>, count: number)\r\n    {\r\n        super();\r\n\r\n        let index = 0;\r\n\r\n        this[Symbol.iterator] = function* ()\r\n        {\r\n            for (const element of source)\r\n            {\r\n                if (index < count)\r\n                    yield element;\r\n                else\r\n                    break;\r\n\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass TakeWhileIterator<TSource> extends Enumerable<TSource>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TSource>;\r\n    \r\n    public constructor(source: Iterable<TSource>, predicate: Func2<TSource, number, boolean>)\r\n    {\r\n        super();\r\n\r\n        let index = 0;\r\n\r\n        this[Symbol.iterator] = function* ()\r\n        {\r\n            for (const element of source)\r\n            {\r\n                if (predicate(element, index))\r\n                    yield element;\r\n                else\r\n                    break;\r\n\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass ZipIterator<TSource, TSecond, TResult> extends Enumerable<TResult>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TResult>;\r\n\r\n    public constructor(source: Iterable<TSource>, collection: Iterable<TSecond>, selector: Func3<TSource, TSecond, number, TResult>)\r\n    {\r\n        super();\r\n        this[Symbol.iterator] = function* ()\r\n        {\r\n            let index = 0;\r\n            for (const element of source)\r\n            {\r\n                yield selector(element, collection[index], index);\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/Projects/Surface/workbench/modules/source/@surface/enumerable/index.ts","import '@surface/enumerable/extensions';\r\nimport { Enumerable }              from '@surface/enumerable';\r\nimport { Nullable, ObjectLiteral } from '@surface/types';\r\n\r\nexport class Dictionary<TKey = string, TValue = any> extends Enumerable<KeyValuePair<TKey, TValue>>\r\n{\r\n    private _source: Map<TKey, Nullable<TValue>>;\r\n    \r\n    public [Symbol.iterator]: () => Iterator<KeyValuePair<TKey, TValue>>\r\n\r\n    public get size(): number\r\n    {\r\n        return this._source.size;\r\n    }\r\n\r\n    public constructor();\r\n    public constructor(source: ObjectLiteral<TValue>);\r\n    public constructor(source: Array<KeyValuePair<TKey, TValue>>);\r\n    public constructor(source?: ObjectLiteral<TValue>|Array<KeyValuePair<TKey, TValue>>)\r\n    {\r\n        super();        \r\n\r\n        let keysValues: Array<KeyValuePair<TKey, TValue>> = []\r\n\r\n        if (source)\r\n        {\r\n            if (Array.isArray(source))\r\n                keysValues = source;            \r\n            else\r\n                keysValues = Object.keys(source).asEnumerable().select(x => new KeyValuePair(x as any as TKey, source[x])).toArray();\r\n        }\r\n\r\n        this._source = new Map();\r\n        keysValues.forEach(x => this._source.set(x.key, x.value));\r\n\r\n        this[Symbol.iterator] = function* getIterable(this: Dictionary<TKey, TValue>)\r\n        {\r\n            for (const element of this._source)\r\n            {\r\n                let [ key, value ] = element;\r\n                yield new KeyValuePair(key, value);\r\n            }\r\n        }\r\n        .bind(this);\r\n    }\r\n\r\n    public delete(key: TKey): void\r\n    {\r\n        this._source.delete(key);\r\n    }\r\n\r\n    public has(key: TKey): boolean\r\n    {\r\n        return this._source.has(key);\r\n    }\r\n\r\n    public get(key: TKey): Nullable<TValue>\r\n    {\r\n        return this._source.get(key);\r\n    }\r\n\r\n    public set(key: TKey, value: TValue): void\r\n    {\r\n        this._source.set(key, value);\r\n    }\r\n}\r\n\r\nexport class KeyValuePair<TKey, TValue>\r\n{\r\n    private _key: TKey\r\n    public get key(): TKey\r\n    {\r\n        return this._key;\r\n    }\r\n    \r\n    public set key(value: TKey)\r\n    {\r\n        this._key = value;\r\n    }\r\n\r\n    private _value: TValue\r\n    public get value(): TValue\r\n    {\r\n        return this._value;\r\n    }\r\n    \r\n    public set value(value: TValue)\r\n    {\r\n        this._value = value;\r\n    }\r\n\r\n    public constructor();\r\n    public constructor(key: TKey, value: TValue);\r\n    public constructor(key?: TKey, value?: TValue)\r\n    {\r\n        if(key)\r\n            this._key = key\r\n        \r\n        if(value)\r\n            this._value = value;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/Projects/Surface/workbench/modules/source/@surface/collection/dictionary.ts","import { Enumerable } from '@surface/enumerable';\r\nimport { Nullable }   from '@surface/types';\r\n\r\nexport class List<TSource> extends Enumerable<TSource>\r\n{\r\n    public [Symbol.iterator]: () => Iterator<TSource>;\r\n    \r\n    private source: Array<TSource>;\r\n    \r\n    /** Returns Length of the list. */\r\n    public get length(): number\r\n    {\r\n        return this.source.length;\r\n    }\r\n    \r\n    public constructor();\r\n    /**\r\n     * @param source Array<TSource> used to create the list.\r\n     */\r\n    public constructor(source: Array<TSource>);\r\n    /**\r\n     * @param source Enumerable<TSource> used to create the list.\r\n     */\r\n    public constructor(source: Enumerable<TSource>);\r\n    public constructor(source?: Array<TSource>|Enumerable<TSource>)\r\n    {\r\n        super();\r\n        if (source && Array.isArray(source))\r\n            this.source = source;\r\n        else if (source instanceof Enumerable)\r\n            this.source = source.toArray();\r\n        else\r\n            this.source = [];\r\n\r\n        let self = this;\r\n\r\n        this[Symbol.iterator] = function* ()\r\n        {\r\n            for (const item of self.source)\r\n                yield item;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds provided item to the list.\r\n     * @param item Item to insert.\r\n     */\r\n    public add(item: TSource): void\r\n    {\r\n        this.source.push(item);\r\n    }\r\n\r\n    /**\r\n     * Adds to the list the provided item at specified index.\r\n     * @param item Item to insert.\r\n     * @param index Position from item to insert.\r\n     */\r\n    public addAt(item: TSource, index): void;\r\n    /**\r\n     * Adds to the list the provided Array<TSource> object at specified index.\r\n     * @param items Items to insert.\r\n     * @param index Position from items to insert.\r\n     */\r\n    public addAt(items: Array<TSource>, index): void;\r\n    /**\r\n     * Adds to the list the provided List<TSource> object at specified index.\r\n     * @param items Items to insert.\r\n     * @param index Position from items to insert.\r\n     */\r\n    public addAt(items: List<TSource>, index): void;\r\n    public addAt(itemOrItems: TSource|List<TSource>|Array<TSource>, index): void\r\n    {        \r\n        let left = this.source.splice(index + 1)\r\n        if (Array.isArray(itemOrItems))\r\n        {\r\n            let items = itemOrItems;\r\n            this.source = this.source.concat(items).concat(left);\r\n        }\r\n        else if (itemOrItems instanceof List)\r\n        {\r\n            let items = Array.from(itemOrItems);\r\n            this.source = this.source.concat(items).concat(left);\r\n        }\r\n        else\r\n        {\r\n            let item = itemOrItems;\r\n            this.source = this.source.concat([item]).concat(left);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes from the list the specified item.\r\n     * @param item Item to remove.\r\n     */\r\n    public remove(item: TSource): void;\r\n    /**\r\n     * Removes from the list the item in the specified index.\r\n     * @param index Position from item to remove.\r\n     */\r\n    public remove(index: number): void;\r\n    /**\r\n     * Removes from the list the amount of items specified from the index.\r\n     * @param index Position from item to remove.\r\n     * @param count Quantity of items to remove.\r\n     */\r\n    public remove(index: number, count: number): void;\r\n    public remove(indexOritem: number|TSource, count?: number): void\r\n    {\r\n        let index: number            = 0;\r\n        let item:  Nullable<TSource> = null;\r\n        \r\n        if (typeof indexOritem == \"number\")\r\n        {\r\n            index = indexOritem;\r\n            this.source.splice(index, count || 1)\r\n        }\r\n        else\r\n        {\r\n            item = indexOritem;\r\n            index = this.source.findIndex(x => Object.is(x, item));\r\n            this.source.splice(index, 1)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the item at the specified index.\r\n     * @param index Position of the item.\r\n     */\r\n    public item(index: number): TSource\r\n    {\r\n        return this.source[index];\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/Projects/Surface/workbench/modules/source/@surface/collection/list.ts","import * as collection from 'collection';\r\nimport * as router     from 'router';\r\n\r\ncollection.execute();\r\nrouter.execute();\n\n\n// WEBPACK FOOTER //\n// ./index.ts","import { Dictionary } from '@surface/collection';\r\n\r\nexport function execute()\r\n{\r\n    let dictionary = new Dictionary({ foo: 1, bar: 2});\r\n    \r\n    dictionary.forEach(x => console.log(x.key));\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./collection.ts","export * from '@surface/collection/dictionary';\r\nexport * from '@surface/collection/list';\n\n\n// WEBPACK FOOTER //\n// F:/Projects/Surface/workbench/modules/source/@surface/collection/index.ts","import { Enumerable } from '@surface/enumerable';\r\n\r\ndeclare global\r\n{\r\n    interface Array<T>\r\n    {        \r\n        /** Cast Array<T> into Enumerable<T> */\r\n        asEnumerable(): Enumerable<T>;        \r\n    }\r\n}\r\n\r\nArray.prototype.asEnumerable = function <T>(this: Array<T>)\r\n{\r\n    return Enumerable.from(this);\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/Projects/Surface/workbench/modules/source/@surface/enumerable/extensions.ts","import { Router, RoutingType } from '@surface/router';\r\n\r\nexport function execute()\r\n{\r\n    let routes =\r\n    [\r\n        '/{controller}/{action}/{id?}',\r\n        '/{controller}/{language}-{country}/{action}/{id?}',\r\n        '/{controller=home}/{action=index}/{id?}',\r\n        '/adm/{controller=home}/{action=index}/{id?}',\r\n    ];\r\n\r\n    let router = Router.create(RoutingType.Abstract, routes);\r\n\r\n    console.log('case 1: ', router.match('/home'));\r\n    console.log('case 2: ', router.match('/home/about'));\r\n    console.log('case 2: ', router.match('/home/en-us/about/1'));\r\n    console.log('case 3: ', router.match('/home/about/2'));\r\n    console.log('case 4: ', router.match('/adm/home/about/1'));\r\n}\n\n\n// WEBPACK FOOTER //\n// ./router.ts","import '@surface/collection/extensions';\r\nimport { List }              from '@surface/collection/list';\r\nimport { Route }             from '@surface/router/route';\r\nimport { Action1, Nullable } from '@surface/types';\r\n\r\nexport enum RoutingType\r\n{\r\n    Abstract,\r\n    Hash,\r\n    History\r\n}\r\n\r\nexport abstract class Router\r\n{\r\n    protected _routes: List<Route>;\r\n\r\n    public constructor(routes: List<Route>)\r\n    {\r\n        this._routes = routes;\r\n    }\r\n\r\n    public static create(routingType: RoutingType, routes: Array<string>): Router\r\n    {        \r\n        let route = routes.asEnumerable().select(x => new Route(x)).toList();\r\n\r\n        switch (routingType)\r\n        {\r\n            case RoutingType.Abstract:\r\n                return new AbstractRouter(route);\r\n            case RoutingType.Hash:\r\n                return new HashRouter(route);\r\n            case RoutingType.History:\r\n                return new HistoryRouter(route);\r\n        }\r\n    }\r\n\r\n    public match(path: string): Nullable<Route.Match>\r\n    {\r\n        return this._routes.select(x => x.match(path)).firstOrDefault(x => !!x);\r\n    }\r\n\r\n    public abstract routeTo(path: string): void;\r\n    public abstract when(route: string, action: Action1<Route>): Router;\r\n}\r\n\r\nclass AbstractRouter extends Router\r\n{\r\n    public constructor(routes: List<Route>)\r\n    {\r\n        super(routes);\r\n    }\r\n\r\n    public routeTo(path: string): void\r\n    {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public when(route: string, action: Action1<Route>): Router\r\n    {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n\r\nclass HashRouter extends Router\r\n{\r\n    public constructor(routes: List<Route>)\r\n    {\r\n        super(routes);\r\n    }\r\n    \r\n    public routeTo(path: string): void\r\n    {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    public when(route: string, action: Action1<Route>): Router {\r\n        throw new Error(\"Method not implemented.\");\r\n    }    \r\n}\r\n\r\nclass HistoryRouter extends Router\r\n{\r\n    \r\n    public constructor(routes: List<Route>)\r\n    {\r\n        super(routes);\r\n\r\n        let self = this;\r\n        window.onpopstate = function(this: Window, event: PopStateEvent)\r\n        {\r\n            self.routeTo(this.location.pathname);\r\n        }\r\n    }\r\n    \r\n    public routeTo(path: string): void\r\n    {\r\n        /*\r\n        window.history.pushState(null, \"\", path);\r\n        let route = this.routes[path];\r\n\r\n        if (route)\r\n            route(this.parsePath(path));\r\n        else if (this.routes['/*'])\r\n            this.routes['/*'](this.parsePath(path));\r\n        */\r\n    }\r\n\r\n    public when(route: string, action: Action1<Route>): HistoryRouter\r\n    {\r\n        //this.routes[route] = action;\r\n        return this;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/Projects/Surface/workbench/modules/source/@surface/router/index.ts","import { Dictionary, KeyValuePair } from \"@surface/collection/dictionary\";\r\nimport { List }                     from '@surface/collection/list';\r\nimport { Enumerable }               from '@surface/enumerable';\r\nimport { Func1 }                    from '@surface/types';\r\n\r\ndeclare global\r\n{\r\n    interface Array<T>\r\n    {        \r\n        /** Cast Array<T> into Enumerable<T> */\r\n        asEnumerable(): Enumerable<T>;\r\n        /** Cast Array<T> into List<T> */\r\n        toList(): List<T>;     \r\n    }\r\n}\r\n\r\ndeclare module '@surface/enumerable'\r\n{\r\n    interface Enumerable<TSource>\r\n    {\r\n        /** Creates an List from a Enumerable<T>. */\r\n        toList(): List<TSource>;\r\n        /** Creates an Dictionary from a Enumerable<T>. */\r\n        toDictionary<TSource, TKey, TValue>(keySelector: Func1<TSource, TKey>, valueSelector: Func1<TSource, TValue>): Dictionary<TKey, TValue>;\r\n    }\r\n}\r\n\r\nArray.prototype.toList = function <T>(this: Array<T>)\r\n{\r\n    return new List(this);\r\n}\r\n\r\nEnumerable.prototype.toList = function<T>(this: Enumerable<T>)\r\n{\r\n    return new List(this);\r\n}\r\n\r\nEnumerable.prototype.toDictionary = function <TSource, TKey, TValue>(this: Enumerable<TSource>, keySelector: Func1<TSource, TKey>, valueSelector: Func1<TSource, TValue>): Dictionary<TKey, TValue>\r\n{\r\n    return new Dictionary(this.select(x => new KeyValuePair(keySelector(x), valueSelector(x))).toArray());\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/Projects/Surface/workbench/modules/source/@surface/collection/extensions.ts","import { ObjectLiteral, Nullable } from '@surface/types';\r\n\r\n//import { ObjectLiteral } from '@surface/types';\r\n\r\nexport class Route\r\n{\r\n    private _expression: RegExp\r\n    public get expression(): RegExp\r\n    {\r\n        return this._expression;\r\n    }\r\n\r\n    private _isDefault: boolean\r\n    public get isDefault(): boolean\r\n    {\r\n        return this._isDefault;\r\n    }\r\n    \r\n    private _pattern: string\r\n    public get pattern(): string\r\n    {\r\n        return this._pattern;\r\n    }\r\n\r\n    public constructor(pattern: string);\r\n    public constructor(pattern: string, isDefault: boolean);\r\n    public constructor(pattern: string, isDefault?: boolean)\r\n    {\r\n        this._pattern = pattern;\r\n\r\n        this._expression = this.toExpression(pattern);\r\n    }\r\n\r\n    public match(route: string): Nullable<Route.Match>\r\n    {\r\n        let [path, search] = route.split('?');\r\n\r\n        let params: ObjectLiteral<string> = { };\r\n\r\n        if (this._expression.test(route))\r\n        {\r\n            let keys   = this._expression.exec(this._pattern);\r\n            \r\n            this._expression.lastIndex = 0;\r\n            \r\n            let values = this._expression.exec(path);\r\n\r\n            if (keys && values)\r\n            {\r\n                Array.from(keys).asEnumerable()\r\n                    .zip(Array.from(values), (key, value) => ({ key, value }))\r\n                    .skip(1)\r\n                    .forEach\r\n                    (\r\n                        x =>\r\n                        {\r\n                            let match = /{\\s*([^=?]+)\\??(?:=([^}]*))?\\s*}/.exec(x.key);\r\n                            if (match)\r\n                            {\r\n                                params[match[1]] = x.value || match[2];\r\n                            }\r\n                        }\r\n                    );\r\n            }\r\n\r\n            return { match: this.pattern, route, params, search };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private toExpression(pattern: string): RegExp\r\n    {        \r\n        let expression = pattern.replace(/^\\/|\\/$/g, '').split('/').asEnumerable()\r\n            .select(x => x.replace(/{\\s*([^}\\s\\?=]+)\\s*}/g, '([^\\\\\\/]+)').replace(/{\\s*([^}=?\\s]+)\\s*=\\s*([^}=?\\s]+)\\s*}|{\\s*([^} ?]+\\?)?\\s*}|(\\s*\\*\\s*)/, '([^\\\\\\/]*)'))\r\n            .toArray()\r\n            .join('\\\\\\/');\r\n\r\n        expression = expression.replace(/(\\(\\[\\^\\\\\\/\\]\\*\\))(\\\\\\/)/g, '$1\\\\\\/?');\r\n\r\n        return new RegExp(`^\\/?${expression}\\/?$`);\r\n    }\r\n}\r\n\r\nexport namespace Route\r\n{\r\n    export interface Match\r\n    {\r\n        match:  string;\r\n        params: ObjectLiteral<string>;\r\n        route:  string;\r\n        search: string;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/Projects/Surface/workbench/modules/source/@surface/router/route.ts"],"sourceRoot":""}