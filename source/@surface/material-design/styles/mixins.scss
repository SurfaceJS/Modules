@import "./functions.scss";
@import "./variables.scss";

@mixin  at-class($class, $property, $value, $root: "#container")
{
    @at-root #{append-class(&, $root, "#{$class}")}
    {
        #{$property}: #{$value};
    }
}

@mixin container()
{
    @include inheritance;
    @include flex;
}

@mixin elevation($elevation)
{
    box-shadow: map-get($shadow-key-umbra, $elevation), map-get($shadow-key-penumbra, $elevation), map-get($shadow-key-ambient, $elevation);
}

@mixin flex
{
    box-sizing:  border-box;
    display:     inline-flex;
    flex:        0 0 auto;
    outline:     0;
    will-change: box-shadow;
}

@mixin host
{
    -webkit-tap-highlight-color: transparent;

    box-sizing:  border-box;
    caret-color: currentColor;
    display:     inline-flex;
    flex:        0 0 auto;
    font-family: Roboto, sans-serif;
    outline:     0;
}

@mixin hover-before
{
    &::before
    {
        opacity: 0.2;
    }
}

@mixin hoverable-before
{
    &::before
    {
        background-color: currentColor;
        border-radius:    inherit;
        bottom:           0;
        color:            inherit;
        content:          "";
        left:             0;
        opacity:          0;
        pointer-events:   none;
        position:         absolute;
        right:            0;
        top:              0;
        transition:       opacity 0.2s cubic-bezier(0.4, 0, 0.6, 1);
    }
}

@mixin inheritance
{
    position: inherit;

    bottom:   inherit;
    left:     inherit;
    right:    inherit;
    top:      inherit;

    height:   inherit;
    width:    inherit;

    z-index:  inherit;
}

@mixin themed-color($variable, $color, $property, $root)
{
    &
    {
        #{$property}: var(--#{$variable}, var(--smd-light-#{$color}, map-get(map-get($default-theme, "light"), $color)));
    }

    @each $theme in "dark", "light"
    {
        @if ($root == "*")
        {
            @at-root
            :host-context(.#{$theme}) #{str-replace(#{&}, ":host", "")},
            :host-context(.light, .dark) #{"#{&} #{$theme}"},
            #{"#{&} #{$theme}"}
            {
                #{$property}: var(--#{$variable}, var(--smd-#{$theme}-#{$color}, var(--smd-#{$color}, map-get(map-get($default-theme, $theme), $color))));
            }
        }
        @else
        {
            @at-root
            :host-context(.#{$theme}) #{str-replace(#{&}, ":host", "")},
            :host-context(.light, .dark) #{append-class(str-replace(#{&}, ":host", ""), $root, "#{$theme}")},
            #{append-class(&, $root, "#{$theme}")}
            {
                #{$property}: var(--#{$variable}, var(--smd-#{$theme}-#{$color}, var(--smd-#{$color}, map-get(map-get($default-theme, $theme), $color))));
            }
        }
    }
}

@mixin this-color($color, $property: "color", $root: "#container")
{
    @include themed-color("this-color", $color, $property, $root)
}

@mixin this-text-color($color: "text", $property: "color", $root: "#container")
{
    @include themed-color("this-text-color", $color, $property, $root)
}