export default class Messages
{
    // public static readonly badImportCallArity            = "Unexpected token";
    // public static readonly badGetterArity                = "Getter must not have any formal parameters";
    // public static readonly badSetterArity                = "Setter must have exactly one formal parameter";
    // public static readonly badSetterRestParameter        = "Setter function argument must not be a rest parameter";
    // public static readonly constructorIsAsync            = "Class constructor may not be an async method";
    // public static readonly constructorSpecialMethod      = "Class constructor may not be an accessor";
    // public static readonly declarationMissingInitializer = "Missing initializer in %0 declaration";
    // public static readonly defaultRestParameter          = "Unexpected token =";
    // public static readonly defaultRestProperty           = "Unexpected token =";
    // public static readonly duplicateBinding              = "Duplicate binding %0";
    // public static readonly duplicateConstructor          = "A class may only have one constructor";
    // public static readonly duplicateProtoProperty        = "Duplicate __proto__ fields are not allowed in object literals";
    // public static readonly forInOfLoopInitializer        = "%0 loop variable declaration may not have an initializer";
    // public static readonly generatorInLegacyContext      = "Generator declarations are not allowed in legacy contexts";
    // public static readonly illegalBreak                  = "Illegal break statement";
    // public static readonly illegalContinue               = "Illegal continue statement";
    // public static readonly illegalExportDeclaration      = "Unexpected token";
    // public static readonly illegalImportDeclaration      = "Unexpected token";
    // public static readonly illegalLanguageModeDirective  = "Illegal 'use strict' directive in function with non-simple parameter list";
    // public static readonly illegalReturn                 = "Illegal return statement";
    public static readonly invalidEscapedReservedWord    = "Keyword must not contain escaped characters"; // used
    public static readonly invalidHexEscapeSequence      = "Invalid hexadecimal escape sequence"; // used
    // public static readonly invalidLHSInAssignment        = "Invalid left-hand side in assignment";
    // public static readonly invalidLHSInForIn             = "Invalid left-hand side in for-in";
    // public static readonly invalidLHSInForLoop           = "Invalid left-hand side in for-loop";
    // public static readonly invalidModuleSpecifier        = "Unexpected token";
    // public static readonly invalidRegExp                 = "Invalid regular expression";
    // public static readonly letInLexicalBinding           = "let is disallowed as a lexically bound name";
    // public static readonly missingFromClause             = "Unexpected token";
    // public static readonly multipleDefaultsInSwitch      = "More than one default clause in switch statement";
    // public static readonly newlineAfterThrow             = "Illegal newline after throw";
    // public static readonly noAsAfterImportNamespace      = "Unexpected token";
    // public static readonly noCatchOrFinally              = "Missing catch or finally after try";
    public static readonly numericSepatorNotAllowed      = "Numeric serapators are not allowed here.";
    // public static readonly parameterAfterRestParameter   = "Rest parameter must be last formal parameter";
    // public static readonly propertyAfterRestProperty     = "Unexpected token";
    // public static readonly redeclaration                 = "%0 '%1' has already been declared";
    // public static readonly staticPrototype               = "Classes may not have static property named prototype";
    // public static readonly strictCatchVariable           = "Catch variable may not be eval or arguments in strict mode";
    // public static readonly strictDelete                  = "Delete of an unqualified identifier in strict mode.";
    // public static readonly strictFunction                = "In strict mode code; functions can only be declared at top level or inside a block";
    // public static readonly strictFunctionName            = "Function name may not be eval or arguments in strict mode";
    // public static readonly strictLHSAssignment           = "Assignment to eval or arguments is not allowed in strict mode";
    // public static readonly strictLHSPostfix              = "Postfix increment/decrement may not have eval or arguments operand in strict mode";
    // public static readonly strictLHSPrefix               = "Prefix increment/decrement may not have eval or arguments operand in strict mode";
    // public static readonly strictModeWith                = "Strict mode code may not include a with statement";
    // public static readonly strictOctalLiteral            = "Octal literals are not allowed in strict mode.";
    // public static readonly strictParamDupe               = "Strict mode function may not have duplicate parameter names";
    // public static readonly strictParamName               = "Parameter name eval or arguments is not allowed in strict mode";
    // public static readonly strictReservedWord            = "Use of future reserved word in strict mode";
    // public static readonly strictVarName                 = "Variable name may not be eval or arguments in strict mode";
    public static readonly templateOctalLiteral          = "Octal literals are not allowed in template strings."; // used
    //public static readonly unexpectedEOS                 = "Unexpected end of input";
    //public static readonly unexpectedIdentifier          = "Unexpected identifier";
    //public static readonly unexpectedNumber              = "Unexpected number";
    //public static readonly unexpectedReserved            = "Unexpected reserved word";
    //public static readonly unexpectedString              = "Unexpected string";
    //public static readonly unexpectedTemplate            = "Unexpected quasi %0";
    //public static readonly unexpectedToken               = "Unexpected token %0";
    public static readonly unexpectedTokenIllegal        = "Unexpected token ILLEGAL"; // used
    //public static readonly unknownLabel                  = "Undefined label '%0'";
    public static readonly unterminatedRegExp            = "Invalid regular expression missing /";    
}